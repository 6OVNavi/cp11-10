from aiogram import F, Router
from aiogram import Bot, Dispatcher, html
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram import types
from aiogram.types import FSInputFile

import sqlite3
import hashlib
import logging
import os
import random
from textwrap import dedent
from functools import wraps

from keyboards.kb import auth_kb, askq_kb

from RAG_VALERA_CODE.rag.rag_inference import EMBEDDING_MODEL, LOG_DB_NAME, EMBEDDING_MODEL, LLM_MODEL
from RAG_VALERA_CODE.rag.rag_inference import prompt_lia, client, \
    setup_database, setup_log_database, retrieve_context, call_model, ask_question, ask_question_creative

from bot import db, embedding_model, conversation_history, log_db, chat_id
from bot import bot


router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM 
class StateMachine(StatesGroup):
    something_like_login = State() #test
    settings = State() #think about it
    waiting_for_question = State()
    waiting_for_question_creative = State()
    waiting_for_file = State()

    waiting_for_email = State()
    waiting_for_password = State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegisterUser(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()
    waiting_for_access_level = State()
    waiting_for_region = State()
    waiting_for_department = State()
    waiting_for_position = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ user_id
def get_user_access_level(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''SELECT access_level FROM users WHERE userID = ?''', (user_id,))
    result = cursor.fetchone()

    conn.close()

    if result:
        return result[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
def access_level_required(level):
    def decorator(func):
        @wraps(func)
        async def wrapped(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ user_id
            access_level = get_user_access_level(user_id)
            
            if access_level is None:
                await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                return

            if access_level >= level:
                return await func(message, *args, **kwargs)
            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return wrapped
    return decorator


# @router.message(Command(commands=['upload_file']))
@router.message(F.content_type.in_({'document'}))
@access_level_required(3)
async def file_handler(message: Message):
    """
    This handler receives document sent by the user and saves them to a local directory.
    """
    try:
        document = message.document

        file = await bot.get_file(document.file_id)
        file_path = file.file_path

        save_directory = 'RAG_VALERA_CODE/rag/data'
        os.makedirs(save_directory, exist_ok=True)  # Ensure directory exists

        # Define the path
        # global file_name
        file_name = document.file_name
        destination = os.path.join(save_directory, file_name)

        await bot.download_file(file_path, destination)

        # Sends TestLogMessage to user, delete in prod.
        await message.answer(f"–§–∞–π–ª '{file_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

    except Exception as exctact_e:
        logging.error("Error while downloading file")
        await message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞') # ü•¥ü•¥ü•¥


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è user_id —Å email
def save_user_id_to_db(user_id, email):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''UPDATE users SET userID = ? WHERE email = ?''', (user_id, email))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_db(email, password, access_level, region, department, position):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    password_hash = generate_password_hash(password)
    
    try:
        cursor.execute('''INSERT INTO users (email, password, access_level, region, department, position) VALUES (?, ?, ?, ?, ?, ?)''',
                       (email, password_hash, access_level, region, department, position))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
@router.message(Command(commands=['register_user']))
@access_level_required(3)
async def start_register_new_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
    await state.set_state(RegisterUser.waiting_for_email)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email
@router.message(RegisterUser.waiting_for_email)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    await state.set_state(RegisterUser.waiting_for_password)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
@router.message(RegisterUser.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    await state.update_data(password=password)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞–π–Ω–∏–π —Å–µ–≤–µ—Ä):")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
    await state.set_state(RegisterUser.waiting_for_region)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
@router.message(RegisterUser.waiting_for_region)
async def process_region(message: types.Message, state: FSMContext):
    region = message.text
    await state.update_data(region=region)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    await state.set_state(RegisterUser.waiting_for_department)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
@router.message(RegisterUser.waiting_for_department)
async def process_region(message: types.Message, state: FSMContext):
    department = message.text
    await state.update_data(department=department)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    await state.set_state(RegisterUser.waiting_for_position)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@router.message(RegisterUser.waiting_for_position)
async def process_region(message: types.Message, state: FSMContext):
    position = message.text
    await state.update_data(position=position)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1 ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, 2 - –º–µ–Ω–µ–¥–∂–µ—Ä, 3 ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
    await state.set_state(RegisterUser.waiting_for_access_level)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
@router.message(RegisterUser.waiting_for_access_level)
async def process_access_level(message: types.Message, state: FSMContext):
    access_level = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
    if not access_level.isdigit() or int(access_level) not in [0, 1, 2, 3]:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 3")
        return

    access_level = int(access_level)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    user_data = await state.get_data()
    email = user_data['email']
    password = user_data['password']
    region = user_data['region']
    department = user_data['department']
    position = user_data['position']

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if add_user_to_db(email, password, access_level, region, department, position):
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ {access_level}.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    await state.clear()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–¥–∞–ª–µ–Ω–∏–µ userID)
def logout_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # –û–±–Ω—É–ª—è–µ–º –ø–æ–ª–µ userID, —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(f'''UPDATE users SET userID = {random.randint(1, 1000000)} WHERE userID = ?''', (user_id,))
    conn.commit()
    conn.close()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã logout
@router.message(Command(commands=['logout']))
async def handle_logout(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logout_user(user_id)

    await state.clear()

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.", reply_markup=auth_kb())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
@router.message(Command(commands=['get_statistics']))
@access_level_required(3)
async def get_statistics(message: types.Message, state: FSMContext):
    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''SELECT COUNT(*) FROM users''')
    total_users = cursor.fetchone()[0]

    cursor.execute('''SELECT COUNT(*) FROM users WHERE access_level = 3''')
    total_admins = cursor.fetchone()[0]

    conn.close()

    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–ò–∑ –Ω–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}")
    await message.answer(f"–ì–æ—Ç–æ–≤–∏–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..")

    conn = sqlite3.connect('/Users/maximmashtaler/Projects/prog/hacks/CP/szfo2024/cp11-10/log.sqlite3')
    cursor = conn.cursor()

    cursor.execute('''SELECT question FROM logs''')
    total_questions = cursor.fetchall()

    print(total_questions)

    query = '—á–µ–º —á–∞—â–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?'

    prompt = dedent(f"""
    –ò—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

    ```
    {total_questions}
    ```

    —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –æ—Ç–≤–µ—Ç—å –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    {query}
    """)
    

    response = call_model(prompt, conversation_history, temp=0.2)

    await message.answer(response, reply_markup=askq_kb())
    await state.clear()



# @router.message(Command(commands=['get_stat']))
# @access_level_required(3)
# async def stat_answer(message: Message, state: FSMContext):
#     '''
#     –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
#     '''

#     conn = sqlite3.connect('/Users/maximmashtaler/Projects/prog/hacks/CP/szfo2024/cp11-10/log.sqlite3')
#     cursor = conn.cursor()

#     cursor.execute('''SELECT question FROM logs''')
#     total_questions = cursor.fetchall()

#     print(total_questions)

#     query = '—á–µ–º —á–∞—â–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?'

#     prompt = dedent(f"""
#     –ò—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

#     ```
#     {total_questions}
#     ```

#     –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
#     {query}
#     """)
    

#     response = call_model(prompt, conversation_history, temp=0.2)

#     await message.answer(response, reply_markup=askq_kb())
#     await state.clear()

    




@router.message(Command(commands=["start"]))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    Sends Hello message to User
    """
    await state.clear()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=auth_kb())
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã
    # await state.set_state(StateMachine.waiting_for_email)

@router.message(F.text == 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
async def auth_user(message: Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:')
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã
    await state.set_state(StateMachine.waiting_for_email)



@router.message(StateMachine.waiting_for_email)
async def get_email(message: types.Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    email = message.text
    await state.update_data(email=email)
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    await state.set_state(StateMachine.waiting_for_password)

@router.message(StateMachine.waiting_for_password)
async def get_password(message: types.Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''
    password = message.text
    user_data = await state.get_data()
    email = user_data['email']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if authenticate_user(email, password):
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∫—É user_id –∏ email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_user_id_to_db(user_id, email)

        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=askq_kb())
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.set_state(StateMachine.waiting_for_email)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
def generate_password_hash(password):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
    '''
    return hashlib.sha256(password.encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
def authenticate_user(email, password):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    '''
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''SELECT password FROM users WHERE email = ?''', (email,))
    user = cursor.fetchone()
    conn.close()

    if user:
        stored_password = user[0]
        if (stored_password) == generate_password_hash(password):
            return True
    return False




@router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings(message: Message):
    ... #logic for settings.
    await message.reply('–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!')


@router.message(F.text == 'üìÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
async def ask_q(message: Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    '''
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:', reply_markup=askq_kb())

    await state.set_state(StateMachine.waiting_for_question)


@router.message(StateMachine.waiting_for_question)
async def answer(message: Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ —Ä–µ–∂–∏–º–µ QnA
    '''
    await message.reply(f'–í–∞—à –≤–æ–ø—Ä–æ—Å: {message.text}', reply_markup=askq_kb())
    response, context, meta_datas, sources = ask_question(message.text, db, embedding_model, conversation_history, log_db, chat_id)
    fw = ', '.join(set(meta_datas))
    ss = ', '.join(set(sources))
    ans = f"""
    \n–û—Ç–≤–µ—Ç:
    {response}
    \n–û—Ç–∫—É–¥–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    {fw}
    \n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:
    {ss}
    """
    await message.answer(ans, reply_markup=askq_kb())
    await state.clear()



@router.message(F.text == 'üí° –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ')
async def ask_q_creative(message: Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    '''
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:', reply_markup=askq_kb())

    await state.set_state(StateMachine.waiting_for_question_creative)


@router.message(StateMachine.waiting_for_question_creative)
async def creative_answer(message: Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    '''
    await message.reply(f'[CREATIVE] –í–∞—à –≤–æ–ø—Ä–æ—Å: {message.text}', reply_markup=askq_kb())
    response, context, meta_datas, sources = ask_question_creative(message.text, db, embedding_model, conversation_history, log_db, chat_id)
    fw = ', '.join(set(meta_datas))
    ss = ', '.join(set(sources))
    ans = f"""
    \n–û—Ç–≤–µ—Ç:
    {response}
    \n–û—Ç–∫—É–¥–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
    {fw}
    \n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:
    {ss}
    """
    await message.answer(ans, reply_markup=askq_kb())
    await state.clear()

    